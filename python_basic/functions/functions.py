# 自定义函数
# 编程的过程中，往往要写一些进行某种运算的代码，通过这些代码获取我们想要的结果。这些运算的代码，我们需要使用到多次，为了避免大量重复编写这些代码，我们可以把这些运算过程的代码定义为函数。
# 定义函数的关键字：def
def get_birthday0(id0):  # 定义函数名称并设定参数
    birthday = id0[6:14]  # 函数运算过程
    print(birthday)  # 函数运算过程


get_birthday0('110123199001012121')  # 调用函数，显示输出结果为：19900101
get_birthday0('120122199508081321')  # 调用函数，显示输出结果为：19950808

'''
1、要使用def这个关键字进行定义。

2、函数的名称建议使用小写单词组成，单词间以下划线分隔（下划线命名法），这样比较方便理解函数名称的含义。

3、参数是一个自定义的变量名称，通常也是使用小写的单词，用于提示输入的参数内容。

4、定义参数名称与参数以“：”结尾。

5、在定义函数名称与参数的下方，向右缩进编写运算代码的语句块。

6、通过函数名称并写入相应的参数即可调用函数，以实现相应的运算。'''


# 在函数中返回结果
def get_birthday1(id1):  # 定义函数名称并设定参数
    birthday1 = id1[6:14]  # 函数运算过程
    return birthday1  # 返回运算结果。如果不加入return语句，则函数默认执行return None，即函数返回结果为None


# retrun语句会跳出结束函数，并返回结果，该语句之后的语句将不再被执行。

a = get_birthday1('140424199603028797')  # 调用函数
print('birthday is %s' % a)  # 显示输出结果


# 在函数中返回多个结果
def get_birthday2(id2):
    year = id2[6:10]
    month = id2[10:12]
    day = id2[12:14]
    return year, month, day  # 返回多个结果


y, m, d = get_birthday2('161518199803051231')  # 调用函数，返回值赋予三个变量
print('birthday is %s-%s-%s' % (y, m, d))
b = get_birthday2('181629189203231921')  # 可以通过1个变量接收函数的返回结果，这时我们得到的是1个包含了3个元素元组。
print('birthday is %s-%s-%s' % b)


# 通过设定一个参数来控制函数返回结果
# 设置默认值的参数我们叫它关键字参数，没有默认值的参数是位置参数。关键字参数对位置没有要求，不管是设定参数还是调用函数时，可以任意顺序写入。位置参数必须有着严格的位置和顺序，这样才能在调用函数时一一对应。
def get_birthday(id, get_age=False):  # 定义函数名称并设定参数,get_age为关键字参数,默认值为False.若只定义参数而不写入默认值，即便函数运算过程中没有使用这个参数，程序也会抛出异常

    if get_age:  # 对参数进行判断,如果输入的参数为True，执行if语句；如果没有输入参数则按照默认参数False
        return 2018 - int(id[6:10])
    else:
        year = id[6:10]
        month = id[10:12]
        day = id[12:14]
        return year, month, day


bir = get_birthday('181281199812142412', True)
print(bir)  # 执行if语句
bir0 = get_birthday('181281199812142412')  # 执行else语句
