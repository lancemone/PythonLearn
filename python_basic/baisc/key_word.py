# 在Python安装目录下的lib文件夹中，可以看到Keyword.py这个模块，打开之后就能够看到以下这33个关键字
'''
内建常量（Built-in Constants）

True（真）：布尔类型的真值。
False（假）：布尔类型的假值；在Python中None、0、空字符串和空序列以及空字典（”、””、[]、()、{}）均为假值。
None（无）：唯一的一种空值类型，经常用来表示缺少一个值；例如函数中的一些参数默认值为None。



函数定义（Function definitions）

def：定义，定义用户自定义的函数对象。
lambda（希腊字母“λ”）：用于创建匿名函数，lambda表达式能够产生一个函数对象。



类的定义（Class definitions）

class：类，定义一个类的对象。



布尔运算（Boolean Operations）

and（并且）：x and y，如果x为假，返回x，否则返回y；这是一个短路（short-circuit）逻辑运算符，所以只有第一个参数是真的时，它才对第二个参数求值。
or（或者）：x or y，如果x为假，返回y，否则返回x；这是一个短路（short-circuit）逻辑运算符，所以它只对第一个参数为false时的第二个参数进行求值。
not（不是）：not比非布尔运算符优先级低，所以not a == b等同于not (a == b)，并且a == not b这种是错误语法。



操作语句（Statement）

assert（断言）：该语句是将调试断言插入程序的一种方便方法。
pass（通过）：该语句被执行时，什么也不会发生。它的作用是一个占位符，当某个声明是必需的构成，但没有代码需要执行时，可以使用它。
del（删除）：该语句可以删除列表、名以及属性引用。
return（返回）：该语句用于某个函数返回结果，只出现在函数的定义中，不出现在类的定义中。
yield（生产）：该语句用于生成器。
try（尝试）：该语句为一组语句指定异常处理程序，清除代码。
except（排除）：该语句用于指定一个或多个异常处理程序。
finally（最后）：该语句用于指定一个“cleanup”（清理）处理程序，尝试执行except以外的语句。
raise（唤起）：该语句可以显示地引发异常，一旦执行了raise语句，raise后面的语句将不能执行。
break（跳出）：该语句出现在for或while循环中，用于跳出结束循环。
continue（继续）：该语句出现在for或while循环中，用于结束当前循环过程，进入下一次循环过程。
global（全局）：用于当前整个代码块，列举出的标识符作用域将变为全局。
nonlocal（外部）：非局部且非全局，列出的标识符作用域将变为最近的封闭范围，但不是全局。作用域范围概念：当前作用域（局部变量）>>>外层作用域（外部变量）>>>当前模块整体作用域（全局变量）->python内置变量 。
if（如果）：该语句用于起始执行的条件。
elif（否则，如果）：该语句用于未满足上一条件时执行的条件。
else（否则）：该语句用于未满足所有条件时，执行相应语句。
from（从…）：该语句用于查找指定的模块。
import（导入）：该语句用于查找指定的模块，并在必要时对模块进行加载和初始化；
with（和…一致）：该语句用于包装执行一个由上下文管理器定义方法块。
for（对于）：该语句用于遍历一个序列的元素（如字符串，元组和列表）或其他可迭代的对象。
while（在…期间）：该语句用于条件为真时的重复执行。
as（如同）：该操作符用于将对象绑定到标识符。
in（在…里面）：该操作符用于判断成员关系。
is（是）：该操作符用于判断操作符两侧是否同一对象。

'''
